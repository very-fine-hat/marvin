#!/bin/bash
# Marvin AI Configuration Management - Main Command
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Marvin directories
MARVIN_HOME="$HOME/.marvin"
FRAMEWORK_DIR="$MARVIN_HOME/framework"
CONFIGS_DIR="$MARVIN_HOME/configs"
TOOLS_DIR="$FRAMEWORK_DIR/tools"

# Version info
VERSION="1.0.0"
VERSION_FILE="$FRAMEWORK_DIR/.version"

echo_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

get_version() {
    if [[ -f "$VERSION_FILE" ]]; then
        cat "$VERSION_FILE"
    elif [[ -d "$FRAMEWORK_DIR/.git" ]]; then
        cd "$FRAMEWORK_DIR"
        git describe --tags --always 2>/dev/null || echo "unknown"
    else
        echo "$VERSION"
    fi
}

show_help() {
    cat << 'EOF'
ü§ñ Marvin AI Configuration Management

USAGE:
    marvin [domain]         # Link domain configs OR sync if already linked
    marvin --<command>      # Run specific command

MAIN COMMAND:
    marvin                  # Link coding domain OR sync existing configs
    marvin writing          # Link writing domain OR sync existing configs
    marvin rpg-campaign     # Link RPG domain OR sync existing configs
    marvin research         # Link research domain OR sync existing configs

CONFIGURATION COMMANDS:
    marvin --init [domain]  # Initialize personal configuration directory (e.g., .marvin/configs)
    marvin --setup <tool>   # Configure AI tool (cursor, claude, code)
    marvin --sync          # Force sync between personal and project configs
    marvin --validate      # Check configuration consistency
    marvin --status        # Show current state and planned actions
    marvin --update        # Update Marvin framework from GitHub
    marvin --version       # Show version information
    marvin --help          # Show this help message

EXAMPLES:
    marvin                      # Smart default: link coding OR sync existing
    marvin writing              # Link writing configs to current project
    marvin --init               # Initialize personal configs (coding domain)
    marvin --init rpg-campaign  # Initialize with RPG domain
    marvin --init all           # Initialize all available domains
    marvin --setup cursor       # Configure Cursor IDE integration
    marvin --sync              # Force sync changes
    marvin --status            # See what marvin would do

WORKFLOW:
    1. marvin --init            # One-time setup of personal configs
    2. marvin                   # In any project directory - just works!
    3. marvin --setup cursor    # Configure your AI tools
    4. marvin                   # Later: automatically syncs changes

CONFIGURATION LAYERS:
    global/     - Universal identity and preferences
    domains/    - Domain-specific configurations (coding, writing, etc.)
    project/    - Project-specific context and requirements
    always/     - Critical files read first (Brown M&M test, safety, style)

SUPPORTED DOMAINS:
    coding      - Software development (default)
    writing     - Content creation and documentation  
    research    - Research and analysis projects
    rpg-campaign- Tabletop RPG campaign management

SUPPORTED TOOLS:
    cursor      - Cursor IDE integration
    claude      - Claude Projects preparation
    code        - Claude Code terminal integration

Get started: marvin --init
Documentation: https://github.com/very-fine-hat/marvin

"I've calculated your chance of survival, but I don't think you'll like it." - Marvin
EOF
}

check_setup() {
    if [[ ! -d "$CONFIGS_DIR" ]]; then
        echo_color $RED "‚ùå Marvin not set up. Run 'marvin --init' first to create personal configurations."
        exit 1
    fi
}

check_setup_framework() {
    if [[ ! -d "$FRAMEWORK_DIR" ]]; then
        echo_color $RED "‚ùå Marvin framework not found at $FRAMEWORK_DIR"
        echo "   Make sure Marvin framework is properly installed."
        exit 1
    fi
}

# Parse command - support both old and new syntax
FIRST_ARG="${1:-}"
shift || true

# Handle flag-based commands first
case "$FIRST_ARG" in
    "--help"|"-h")
        show_help
        exit 0
        ;;
    "--version"|"-v")
        echo_color $BLUE "ü§ñ Marvin AI Configuration Management"
        echo "Version: $(get_version)"
        echo "Framework: $FRAMEWORK_DIR"
        
        if [[ -d "$FRAMEWORK_DIR/.git" ]]; then
            cd "$FRAMEWORK_DIR"
            echo "Repository: $(git remote get-url origin 2>/dev/null || echo 'unknown')"
            echo "Branch: $(git branch --show-current 2>/dev/null || echo 'unknown')"
            echo "Last commit: $(git log -1 --format='%h %s' 2>/dev/null || echo 'unknown')"
        fi
        exit 0
        ;;
    "--init")
        check_setup_framework
        if [[ ! -f "$TOOLS_DIR/init" ]]; then
            echo_color $RED "‚ùå init tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/init" "$@"
        ;;
    "--setup")
        check_setup_framework
        if [[ ! -f "$TOOLS_DIR/setup" ]]; then
            echo_color $RED "‚ùå setup tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/setup" "$@"
        ;;
    "--sync")
        check_setup_framework
        if [[ ! -f "$TOOLS_DIR/sync" ]]; then
            echo_color $RED "‚ùå sync tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/sync" "$@"
        ;;
    "--validate")
        check_setup_framework
        if [[ ! -f "$TOOLS_DIR/validate" ]]; then
            echo_color $RED "‚ùå validate tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/validate" "$@"
        ;;
    "--status")
        check_setup_framework
        if [[ ! -f "$TOOLS_DIR/status" ]]; then
            echo_color $RED "‚ùå status tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/status" "$@"
        ;;
    "--update")
        echo_color $BLUE "üîÑ Updating Marvin framework..."
        
        # Check if framework directory exists
        if [[ ! -d "$FRAMEWORK_DIR" ]]; then
            echo_color $RED "‚ùå Framework directory not found: $FRAMEWORK_DIR"
            echo "   Run 'marvin --init' first to set up Marvin."
            exit 1
        fi
        
        cd "$FRAMEWORK_DIR"
        
        # Check if we're in a git repository
        if [[ ! -d .git ]]; then
            echo_color $RED "‚ùå Framework directory is not a git repository"
            echo "   Expected git repository at: $FRAMEWORK_DIR"
            exit 1
        fi
        
        # Check for uncommitted changes
        if [[ -n "$(git status --porcelain 2>/dev/null)" ]]; then
            echo_color $YELLOW "‚ö†Ô∏è  Warning: Uncommitted changes detected"
            read -p "Continue with update? This will reset local changes (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo_color $BLUE "Update cancelled."
                exit 0
            fi
        fi
        
        # Fetch and update
        echo_color $BLUE "üìö Fetching latest changes..."
        if ! git fetch origin; then
            echo_color $RED "‚ùå Failed to fetch updates from GitHub"
            exit 1
        fi
        
        echo_color $BLUE "üîÑ Applying updates..."
        if ! git reset --hard origin/main; then
            echo_color $RED "‚ùå Failed to apply updates"
            exit 1
        fi
        
        # Make files executable after update
        echo_color $BLUE "üîß Fixing file permissions..."
        if [[ -f "$FRAMEWORK_DIR/make-executable.sh" ]]; then
            chmod +x "$FRAMEWORK_DIR/make-executable.sh"
            "$FRAMEWORK_DIR/make-executable.sh"
        else
            # Fallback: manually fix permissions
            chmod +x "$FRAMEWORK_DIR/marvin"
            find "$FRAMEWORK_DIR/tools" -type f -not -name "*.sh" -not -name ".DS_Store" -exec chmod +x {} \;
            echo "‚úÖ Made Marvin files executable"
        fi
        
        echo_color $GREEN "‚úÖ Marvin framework updated successfully!"
        echo "   Version: $(get_version)"
        exit 0
        ;;
    "")
        # No arguments - smart main command with default domain
        DOMAIN="coding"
        ;;
    *)
        # Check if argument looks like a domain or old command
        case "$FIRST_ARG" in
            "coding"|"writing"|"research"|"rpg-campaign")
                # Domain specified - smart main command
                DOMAIN="$FIRST_ARG"
                ;;
            *)
                # Unknown command or old syntax
                echo_color $RED "‚ùå Unknown command or domain: $FIRST_ARG"
                echo "   Try 'marvin --help' for usage information."
                echo "   Did you mean 'marvin --$FIRST_ARG'?"
                exit 1
                ;;
        esac
        ;;
esac

# Smart main command logic - if we get here, DOMAIN is set
if [[ -n "${DOMAIN:-}" ]]; then
    check_setup_framework
    
    PROJECT_AI_DIR="./ai-marvin"
    
    if [[ -d "$PROJECT_AI_DIR" ]]; then
        # ai-marvin/ exists - sync mode
        echo_color $BLUE "üîÑ Marvin: Syncing $DOMAIN configurations..."
        
        if [[ ! -f "$TOOLS_DIR/sync" ]]; then
            echo_color $RED "‚ùå sync tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/sync" "$DOMAIN"
    else
        # ai-marvin/ doesn't exist - link mode
        echo_color $BLUE "üîó Marvin: Linking $DOMAIN configurations to current project..."
        
        if [[ ! -f "$TOOLS_DIR/link" ]]; then
            echo_color $RED "‚ùå link tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/link" "$DOMAIN"
    fi
fi

# If we get here, something went wrong
echo_color $RED "‚ùå Unexpected error in command processing"
exit 1