#!/bin/bash
# Marvin AI Configuration Management - Main Command
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Marvin directories
MARVIN_HOME="$HOME/.marvin"
FRAMEWORK_DIR="$MARVIN_HOME/framework"
CONFIGS_DIR="$MARVIN_HOME/configs"
TOOLS_DIR="$FRAMEWORK_DIR/tools"

# Version info
VERSION="1.0.0"
VERSION_FILE="$FRAMEWORK_DIR/.version"

echo_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

get_version() {
    if [[ -f "$VERSION_FILE" ]]; then
        cat "$VERSION_FILE"
    elif [[ -d "$FRAMEWORK_DIR/.git" ]]; then
        cd "$FRAMEWORK_DIR"
        git describe --tags --always 2>/dev/null || echo "unknown"
    else
        echo "$VERSION"
    fi
}

show_help() {
    cat << 'EOF'
ü§ñ Marvin AI Configuration Management

USAGE:
    marvin <command> [options]

COMMANDS:
    init                    Initialize Marvin configuration system
    edit <path>             Edit configuration file
    link <project> [path]   Link existing project to Marvin
    create <project> <type> Create new project from template
    sync <project> <tool>   Deploy configurations to AI tool
    validate                Check configuration consistency
    status                  Show configuration status
    update                  Update Marvin framework from GitHub
    version                 Show version information
    help                    Show this help message

EXAMPLES:
    marvin init                          # First-time setup
    marvin edit global/identity.md       # Edit your identity
    marvin link myapp /path/to/myapp     # Link existing project
    marvin create webapp coding         # New project from template
    marvin sync myapp cursor            # Deploy to Cursor IDE
    marvin validate                      # Check all configs
    marvin update                        # Update framework
    marvin version                       # Show version

CONFIGURATION LAYERS:
    global/     - Universal identity and preferences
    domains/    - Domain-specific configurations (coding, writing, etc.)
    projects/   - Project-specific context and requirements
    sessions/   - Auto-managed session context

SUPPORTED TOOLS:
    cursor      - Cursor IDE rules and configurations
    claude      - Claude Projects knowledge and instructions
    code        - Claude Code terminal configurations
    custom      - Custom AI tool integrations

Get started: marvin init
Documentation: https://github.com/very-fine-hat/marvin

"I've calculated your chance of survival, but I don't think you'll like it." - Marvin
EOF
}

check_setup() {
    if [[ ! -d "$CONFIGS_DIR" ]]; then
        echo_color $RED "‚ùå Marvin not set up. Run the setup script first:"
        echo "   ~/.marvin/framework/setup"
        exit 1
    fi
}

# Parse command
COMMAND="${1:-help}"
shift || true

case "$COMMAND" in
    "help"|"-h"|"--help")
        show_help
        ;;
    
    "version"|"-v"|"--version")
        echo_color $BLUE "ü§ñ Marvin AI Configuration Management"
        echo "Version: $(get_version)"
        echo "Framework: $FRAMEWORK_DIR"
        
        if [[ -d "$FRAMEWORK_DIR/.git" ]]; then
            cd "$FRAMEWORK_DIR"
            echo "Repository: $(git remote get-url origin 2>/dev/null || echo 'unknown')"
            echo "Branch: $(git branch --show-current 2>/dev/null || echo 'unknown')"
            echo "Last commit: $(git log -1 --format='%h %s' 2>/dev/null || echo 'unknown')"
        fi
        ;;
    
    "update")
        echo_color $BLUE "üîÑ Updating Marvin framework..."
        
        # Check if framework directory exists
        if [[ ! -d "$FRAMEWORK_DIR" ]]; then
            echo_color $RED "‚ùå Framework directory not found: $FRAMEWORK_DIR"
            echo "   Run 'marvin init' first to set up Marvin."
            exit 1
        fi
        
        cd "$FRAMEWORK_DIR"
        
        # Check if we're in a git repository
        if [[ ! -d .git ]]; then
            echo_color $RED "‚ùå Framework directory is not a git repository"
            echo "   Expected git repository at: $FRAMEWORK_DIR"
            echo "   Try cloning fresh:"
            echo "   rm -rf $FRAMEWORK_DIR"
            echo "   git clone https://github.com/very-fine-hat/marvin.git $FRAMEWORK_DIR"
            exit 1
        fi
        
        # Check for uncommitted changes
        if [[ -n "$(git status --porcelain 2>/dev/null)" ]]; then
            echo_color $YELLOW "‚ö†Ô∏è  Framework has uncommitted changes:"
            git status --short
            echo
            read -p "Continue anyway? This may lose local changes. (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Update cancelled."
                exit 0
            fi
        fi
        
        # Store current version for comparison
        OLD_VERSION=$(get_version)
        
        # Update from remote
        echo_color $BLUE "üì• Pulling latest changes from GitHub..."
        if ! git fetch origin 2>/dev/null; then
            echo_color $RED "‚ùå Failed to fetch from remote repository"
            echo "   Check your internet connection and repository access."
            exit 1
        fi
        
        # Check if we're behind
        LOCAL=$(git rev-parse HEAD 2>/dev/null)
        REMOTE=$(git rev-parse origin/main 2>/dev/null || git rev-parse origin/master 2>/dev/null)
        
        if [[ "$LOCAL" == "$REMOTE" ]]; then
            echo_color $GREEN "‚úÖ Marvin is already up to date!"
            echo "   Current version: $OLD_VERSION"
            exit 0
        fi
        
        # Apply updates
        if ! git reset --hard "$REMOTE" 2>/dev/null; then
            echo_color $RED "‚ùå Failed to apply updates"
            echo "   You may need to resolve conflicts manually."
            exit 1
        fi
        
        # Make sure scripts are executable
        chmod +x marvin setup 2>/dev/null || true
        if [[ -d tools ]]; then
            chmod +x tools/* 2>/dev/null || true
        fi
        
        NEW_VERSION=$(get_version)
        
        echo_color $GREEN "‚úÖ Marvin framework updated successfully!"
        echo
        echo "Previous version: $OLD_VERSION"
        echo "Current version:  $NEW_VERSION"
        echo
        echo "Changes applied:"
        git log --oneline "$LOCAL..$REMOTE" 2>/dev/null | head -5
        echo
        echo_color $BLUE "üí° Run 'marvin status' to verify everything is working."
        ;;
    
    "init")
        echo_color $BLUE "üöÄ Initializing Marvin..."
        if [[ ! -f "$FRAMEWORK_DIR/setup" ]]; then
            echo_color $RED "‚ùå Setup script not found at $FRAMEWORK_DIR/setup"
            echo "   Make sure Marvin framework is properly installed."
            exit 1
        fi
        exec "$FRAMEWORK_DIR/setup"
        ;;
    
    "edit")
        check_setup
        if [[ $# -eq 0 ]]; then
            echo_color $RED "‚ùå Usage: marvin edit <path>"
            echo "   Example: marvin edit global/identity.md"
            exit 1
        fi
        
        FILE_PATH="$1"
        FULL_PATH="$CONFIGS_DIR/$FILE_PATH"
        
        # Create directory if needed
        mkdir -p "$(dirname "$FULL_PATH")"
        
        # Use preferred editor
        EDITOR="${EDITOR:-nano}"
        if command -v code >/dev/null 2>&1; then
            EDITOR="code"
        elif command -v vim >/dev/null 2>&1; then
            EDITOR="vim"
        fi
        
        echo_color $BLUE "üìù Editing $FILE_PATH with $EDITOR..."
        "$EDITOR" "$FULL_PATH"
        ;;
    
    "link")
        check_setup
        if [[ ! -f "$TOOLS_DIR/link-project" ]]; then
            echo_color $RED "‚ùå link-project tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/link-project" "$@"
        ;;
    
    "create")
        check_setup
        if [[ ! -f "$TOOLS_DIR/create-project" ]]; then
            echo_color $RED "‚ùå create-project tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/create-project" "$@"
        ;;
    
    "sync")
        check_setup
        if [[ ! -f "$TOOLS_DIR/sync-project" ]]; then
            echo_color $RED "‚ùå sync-project tool not found"
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/sync-project" "$@"
        ;;
    
    "validate")
        check_setup
        if [[ ! -f "$TOOLS_DIR/validate-config" ]]; then
            echo_color $RED "‚ùå validate-config tool not found"  
            echo "   Make sure Marvin framework is complete."
            exit 1
        fi
        exec "$TOOLS_DIR/validate-config" "$@"
        ;;
    
    "status")
        check_setup
        echo_color $BLUE "ü§ñ Marvin Configuration Status"
        echo
        echo "Version: $(get_version)"
        echo "Framework: $FRAMEWORK_DIR"
        echo "Configs:   $CONFIGS_DIR"
        echo
        
        # Check git status
        cd "$CONFIGS_DIR"
        if [[ -d .git ]]; then
            echo_color $GREEN "Personal configs git status:"
            git status --short || true
            echo
        fi
        
        # Show directory structure
        echo_color $GREEN "Configuration structure:"
        find "$CONFIGS_DIR" -name "README.md" -prune -o -name ".git" -prune -o -type f -print | head -20
        ;;
    
    *)
        echo_color $RED "‚ùå Unknown command: $COMMAND"
        echo
        show_help
        exit 1
        ;;
esac