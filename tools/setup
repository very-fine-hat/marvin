#!/bin/bash
# Configure specific AI tools for Marvin
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

# Marvin directories
MARVIN_HOME="$HOME/.marvin"
FRAMEWORK_DIR="$MARVIN_HOME/framework"
TOOL_CONFIGS_DIR="$FRAMEWORK_DIR/configs/tools"
PROJECT_AI_DIR="./ai-marvin"

# Parse arguments
TOOL="${1:-}"

if [[ "$TOOL" == "help" || "$TOOL" == "-h" || "$TOOL" == "--help" || -z "$TOOL" ]]; then
    cat << 'EOF'
ü§ñ Marvin Setup - Configure AI Tools

USAGE:
    marvin --setup <tool>

SUPPORTED TOOLS:
    cursor      - Configure Cursor IDE to read ai-marvin/ directory
    claude      - Prepare combined config for Claude Projects
    code        - Configure Claude Code to read ai-marvin/ directory

EXAMPLES:
    marvin --setup cursor       # Configure Cursor IDE integration
    marvin --setup claude       # Prepare for Claude Projects
    marvin --setup code         # Configure Claude Code

This command configures specific AI tools to read your project's ai-marvin/ 
configuration directory. Run this after linking configs to your project.
EOF
    exit 0
fi

# Check if we're in a project with ai-marvin/
PROJECT_AI_DIR="./ai-marvin"
if [[ ! -d "$PROJECT_AI_DIR" ]]; then
    echo_color $RED "‚ùå No ai-marvin/ directory found in current project"
    echo "   Run 'marvin' first to link configurations to this project."
    exit 1
fi

echo_color $BLUE "üîß Marvin: Setting up $TOOL integration..."

case "$TOOL" in
    "cursor")
        # Create .cursor directory and copy entire marvin rules directory
        CURSOR_DIR="./.cursor"
        
        if [[ ! -d "$TOOL_CONFIGS_DIR/cursor" ]]; then
            echo_color $RED "‚ùå Cursor template directory not found: $TOOL_CONFIGS_DIR/cursor"
            exit 1
        fi
        
        # Copy entire cursor config directory to .cursor/rules/
        cp -r "$TOOL_CONFIGS_DIR/cursor" "$CURSOR_DIR/rules"
        
        # Count files deployed
        file_count=$(find "$CURSOR_DIR/rules" -name "*.mdc" | wc -l | tr -d ' ')
        
        echo_color $GREEN "‚úÖ Cursor IDE configured!"
        echo "   Created: $CURSOR_DIR/rules/ (copied entire directory)"
        echo "   Deployed: $file_count .mdc files"
        echo "   Cursor will now read your ai-marvin/ configurations."
        ;;
        
    "claude")
        # Create combined config for Claude Projects
        CLAUDE_DIR="./.marvin-claude"
        mkdir -p "$CLAUDE_DIR"
        
        COMBINED_FILE="$CLAUDE_DIR/combined-context.md"
        TEMPLATE_FILE="$TOOL_CONFIGS_DIR/claude/context-template.md"
        
        if [[ ! -f "$TEMPLATE_FILE" ]]; then
            echo_color $RED "‚ùå Claude template not found: $TEMPLATE_FILE"
            exit 1
        fi
        
        # Start with template
        cp "$TEMPLATE_FILE" "$COMBINED_FILE"
        
        # Build combined content
        TEMP_CONTENT=$(mktemp)
        
        # Function to add files from a directory
        add_files_from_dir() {
            local dir="$1"
            local label="$2"
            
            if [[ -d "$dir" ]]; then
                echo "<!-- $label -->" >> "$TEMP_CONTENT"
                for file in "$dir"/*.md; do
                    if [[ -f "$file" ]]; then
                        echo "" >> "$TEMP_CONTENT"
                        echo "<!-- File: $(basename "$file") -->" >> "$TEMP_CONTENT"
                        cat "$file" >> "$TEMP_CONTENT"
                        echo "" >> "$TEMP_CONTENT"
                    fi
                done
            fi
        }
        
        # Add files in correct order
        add_files_from_dir "$PROJECT_AI_DIR/global/always" "Global Always Files"
        add_files_from_dir "$PROJECT_AI_DIR/global" "Global Files"
        
        # Add domain files (detect which domain is being used)
        for domain_dir in "$PROJECT_AI_DIR"/*; do
            if [[ -d "$domain_dir" && "$(basename "$domain_dir")" != "global" && "$(basename "$domain_dir")" != "project" ]]; then
                domain_name=$(basename "$domain_dir")
                add_files_from_dir "$domain_dir/always" "$domain_name Domain Always Files"
                add_files_from_dir "$domain_dir" "$domain_name Domain Files"
            fi
        done
        
        add_files_from_dir "$PROJECT_AI_DIR/project/always" "Project Always Files"
        add_files_from_dir "$PROJECT_AI_DIR/project" "Project Files"
        
        # Replace placeholder with actual content
        sed "/<!-- MARVIN_CONTENT_PLACEHOLDER -->/r $TEMP_CONTENT" "$COMBINED_FILE" | \
            sed '/<!-- MARVIN_CONTENT_PLACEHOLDER -->/d' > "${COMBINED_FILE}.tmp"
        mv "${COMBINED_FILE}.tmp" "$COMBINED_FILE"
        
        # Clean up
        rm "$TEMP_CONTENT"
        
        echo_color $GREEN "‚úÖ Claude Projects configuration prepared!"
        echo "   Created: $COMBINED_FILE"
        echo "   Upload this file to your Claude Project as knowledge."
        ;;
        
    "code")
        # Copy entire claude-code config directory
        CLAUDE_CODE_DIR="./.claude-code"
        
        if [[ ! -d "$TOOL_CONFIGS_DIR/code" ]]; then
            echo_color $RED "‚ùå Code template directory not found: $TOOL_CONFIGS_DIR/code"
            exit 1
        fi
        
        # Copy entire code config directory
        mkdir -p "$CLAUDE_CODE_DIR"
        cp -r "$TOOL_CONFIGS_DIR/code"/* "$CLAUDE_CODE_DIR/"
        
        # Count files deployed
        file_count=$(find "$CLAUDE_CODE_DIR" -name "*.md" | wc -l | tr -d ' ')
        
        echo_color $GREEN "‚úÖ Claude Code configured!"
        echo "   Created: $CLAUDE_CODE_DIR/ (copied entire directory)"
        echo "   Deployed: $file_count instruction files"
        echo "   Claude Code will now read your ai-marvin/ configurations."
        ;;
        
    *)
        echo_color $RED "‚ùå Unknown tool: $TOOL"
        echo "   Supported tools: cursor, claude, code"
        echo "   Try 'marvin --setup --help' for usage information."
        exit 1
        ;;
esac

echo_color $BLUE "üéâ Setup complete for $TOOL!"
echo
echo_color $YELLOW "üí° Next steps:"
echo "   - Customize ai-marvin/project/context.md with project-specific details"
echo "   - Run 'marvin' to sync any future configuration changes"
echo "   - Commit the new configuration files to your project repository"
