#!/bin/bash
# Validate Marvin configuration consistency
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

# Marvin directories
MARVIN_HOME="$HOME/.marvin"
FRAMEWORK_DIR="$MARVIN_HOME/framework"
CONFIGS_DIR="$MARVIN_HOME/configs"
PROJECT_AI_DIR="./ai-marvin"

# Counters for validation results
ERRORS=0
WARNINGS=0
CHECKS=0

validate_check() {
    ((CHECKS++))
}

validate_error() {
    local message="$1"
    echo_color $RED "‚ùå ERROR: $message"
    ((ERRORS++))
}

validate_warning() {
    local message="$1"
    echo_color $YELLOW "‚ö†Ô∏è  WARNING: $message"
    ((WARNINGS++))
}

validate_success() {
    local message="$1"
    echo_color $GREEN "‚úÖ $message"
}

if [[ "${1:-}" == "help" || "${1:-}" == "-h" || "${1:-}" == "--help" ]]; then
    cat << 'EOF'
ü§ñ Marvin Validate - Check configuration consistency

USAGE:
    marvin --validate

This command validates:
- Framework installation and structure
- Personal configuration completeness
- Project configuration consistency
- Brown M&M test emoji presence
- File permissions and accessibility
- Git repository status

Returns exit code 0 if all validations pass, non-zero if errors found.
EOF
    exit 0
fi

echo_color $BLUE "üîç Marvin: Validating configuration consistency..."
echo

# Check 1: Framework directory exists and is complete
echo_color $BLUE "üìÅ Checking framework installation..."
validate_check

if [[ ! -d "$FRAMEWORK_DIR" ]]; then
    validate_error "Framework directory not found: $FRAMEWORK_DIR"
else
    validate_success "Framework directory exists"
    
    # Check for essential framework files
    if [[ ! -f "$FRAMEWORK_DIR/marvin" ]]; then
        validate_error "Main marvin script not found"
    else
        validate_success "Main marvin script found"
    fi
    
    if [[ ! -d "$FRAMEWORK_DIR/configs" ]]; then
        validate_error "Framework configs directory not found"
    else
        validate_success "Framework configs directory found"
        
        # Check for essential framework defaults
        if [[ ! -f "$FRAMEWORK_DIR/configs/global/always/brown-mnm.md" ]]; then
            validate_error "Brown M&M test file not found in framework"
        else
            validate_success "Brown M&M test file found in framework"
        fi
    fi
    
    if [[ ! -d "$FRAMEWORK_DIR/tools" ]]; then
        validate_error "Tools directory not found"
    else
        validate_success "Tools directory found"
        
        # Check for essential tools
        for tool in init link setup sync validate status; do
            if [[ ! -f "$FRAMEWORK_DIR/tools/$tool" ]]; then
                validate_error "Tool not found: $tool"
            elif [[ ! -x "$FRAMEWORK_DIR/tools/$tool" ]]; then
                validate_warning "Tool not executable: $tool"
            else
                validate_success "Tool found and executable: $tool"
            fi
        done
    fi
fi

# Check 2: Personal configurations
echo
echo_color $BLUE "üë§ Checking personal configurations..."
validate_check

if [[ ! -d "$CONFIGS_DIR" ]]; then
    validate_warning "Personal configs not initialized (run 'marvin --init')"
else
    validate_success "Personal configs directory exists"
    
    # Check directory structure
    if [[ ! -d "$CONFIGS_DIR/global" ]]; then
        validate_error "Global configs directory missing"
    else
        validate_success "Global configs directory found"
        
        if [[ ! -d "$CONFIGS_DIR/global/always" ]]; then
            validate_warning "Global always directory missing"
        else
            validate_success "Global always directory found"
            
            # Check for Brown M&M test
            if [[ ! -f "$CONFIGS_DIR/global/always/brown-mnm.md" ]]; then
                validate_warning "Brown M&M test missing from personal configs"
            else
                validate_success "Brown M&M test found in personal configs"
            fi
        fi
        
        # Check for identity configuration
        if [[ -f "$CONFIGS_DIR/global/template-identity.md" ]]; then
            validate_warning "Template identity file not customized yet"
        elif [[ -f "$CONFIGS_DIR/global/identity.md" ]]; then
            validate_success "Identity configuration customized"
        else
            validate_warning "No identity configuration found"
        fi
    fi
    
    if [[ ! -d "$CONFIGS_DIR/domains" ]]; then
        validate_warning "No domain configurations found"
    else
        validate_success "Domains directory found"
        
        # List available domains
        domain_count=0
        for domain_dir in "$CONFIGS_DIR/domains"/*; do
            if [[ -d "$domain_dir" ]]; then
                domain_name=$(basename "$domain_dir")
                validate_success "Domain available: $domain_name"
                ((domain_count++))
            fi
        done
        
        if [[ $domain_count -eq 0 ]]; then
            validate_warning "No domains configured"
        fi
    fi
    
    # Check git status
    cd "$CONFIGS_DIR"
    if [[ ! -d .git ]]; then
        validate_warning "Personal configs not under version control"
    else
        validate_success "Personal configs under version control"
        
        # Check for uncommitted changes
        if [[ -n "$(git status --porcelain 2>/dev/null)" ]]; then
            validate_warning "Uncommitted changes in personal configs"
        else
            validate_success "Personal configs repository is clean"
        fi
    fi
fi

# Check 3: Project configurations (if in a project)
echo
echo_color $BLUE "üìÇ Checking project configurations..."
validate_check

if [[ ! -d "$PROJECT_AI_DIR" ]]; then
    validate_warning "No project configurations (run 'marvin' to link)"
else
    validate_success "Project ai-marvin directory found"
    
    # Check project structure
    if [[ ! -d "$PROJECT_AI_DIR/global" ]]; then
        validate_error "Project global directory missing"
    else
        validate_success "Project global directory found"
        
        if [[ ! -d "$PROJECT_AI_DIR/global/always" ]]; then
            validate_error "Project global/always directory missing"
        else
            validate_success "Project global/always directory found"
            
            # Check Brown M&M test in project
            if [[ ! -f "$PROJECT_AI_DIR/global/always/brown-mnm.md" ]]; then
                validate_error "Brown M&M test missing from project"
            else
                validate_success "Brown M&M test found in project"
                
                # Validate Brown M&M test has emoji
                if grep -q "üö´üü§" "$PROJECT_AI_DIR/global/always/brown-mnm.md"; then
                    validate_success "Brown M&M test emoji found"
                else
                    validate_error "Brown M&M test emoji missing"
                fi
            fi
        fi
    fi
    
    # Detect and validate domain
    domain_found=""
    for dir in "$PROJECT_AI_DIR"/*; do
        if [[ -d "$dir" ]]; then
            dirname=$(basename "$dir")
            if [[ "$dirname" != "global" && "$dirname" != "project" ]]; then
                domain_found="$dirname"
                validate_success "Domain detected in project: $domain_found"
                break
            fi
        fi
    done
    
    if [[ -z "$domain_found" ]]; then
        validate_warning "No domain detected in project"
    fi
    
    # Check project directory
    if [[ ! -d "$PROJECT_AI_DIR/project" ]]; then
        validate_error "Project-specific directory missing"
    else
        validate_success "Project-specific directory found"
        
        if [[ ! -f "$PROJECT_AI_DIR/project/context.md" ]]; then
            validate_warning "Project context file missing"
        else
            validate_success "Project context file found"
        fi
    fi
fi

# Check 4: Tool integrations
echo
echo_color $BLUE "üîß Checking tool integrations..."
validate_check

# Check Cursor integration
if [[ -d "./.cursor/rules" ]] && [[ -n "$(find ./.cursor/rules -name '*.mdc' 2>/dev/null)" ]]; then
    validate_success "Cursor integration configured"
else
    validate_warning "Cursor integration not configured (run 'marvin --setup cursor')"
fi

# Check Claude Code integration
if [[ -d "./.claude-code" ]] && [[ -n "$(find ./.claude-code -name '*.md' 2>/dev/null)" ]]; then
    validate_success "Claude Code integration configured"
else
    validate_warning "Claude Code integration not configured (run 'marvin --setup code')"
fi

# Check Claude Projects preparation
if [[ -f "./.marvin-claude/combined-context.md" ]]; then
    validate_success "Claude Projects configuration prepared"
else
    validate_warning "Claude Projects not prepared (run 'marvin --setup claude')"
fi

# Summary
echo
echo_color $BLUE "üìä Validation Summary:"
echo "   Total checks: $CHECKS"
echo_color $GREEN "   Successes: $((CHECKS - ERRORS - WARNINGS))"
if [[ $WARNINGS -gt 0 ]]; then
    echo_color $YELLOW "   Warnings: $WARNINGS"
fi
if [[ $ERRORS -gt 0 ]]; then
    echo_color $RED "   Errors: $ERRORS"
fi

echo

if [[ $ERRORS -eq 0 ]]; then
    if [[ $WARNINGS -eq 0 ]]; then
        echo_color $GREEN "üéâ All validations passed! Marvin is working perfectly."
    else
        echo_color $YELLOW "‚úÖ No critical errors, but there are warnings to address."
        echo_color $BLUE "üí° Consider running suggested commands to resolve warnings."
    fi
    exit 0
else
    echo_color $RED "‚ùå Validation failed with $ERRORS error(s)."
    echo_color $BLUE "üîß Fix the errors above and run 'marvin --validate' again."
    exit 1
fi
